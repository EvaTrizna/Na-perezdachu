using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using WMPLib;

namespace Na_perezdachu_1._1
{
    public partial class Form1 : Form
    {
       
        int playerSpeed;
        PictureBox[] powerr;
        int powerSpeed;
        PictureBox[] enemies;
        int enemiesSpeed;
        Random rnd;
        int[] Array = new int[5];
        int score;
        int level;
        //PictureBox[] aBox;

        WindowsMediaPlayer Magic;
        WindowsMediaPlayer GameSong;
        WindowsMediaPlayer Rip;
        WindowsMediaPlayer Target;
        WindowsMediaPlayer Vic;
        public Form1()
        {
            InitializeComponent();
        }
       
        private void Form1_Load(object sender, EventArgs e)
        {
            //инициализация элементов
            label1.Visible = false;
            score = 0;
            level = 1;
            powerr = new PictureBox[1];
            playerSpeed = 5;
            powerSpeed = 50;
            this.BackgroundImage = Properties.Resources.class_2;

            //добавляются звуки
            Magic = new WindowsMediaPlayer();
            Magic.URL = "D:\\Na_perezdachu_1.1\\Resources\\sounds\\power.mp3";
            Magic.settings.volume = 20;

            Target = new WindowsMediaPlayer();
            Target.URL = "D:\\Na_perezdachu_1.1\\Resources\\sounds\\popadanie.mp3";
            Target.settings.volume = 15;

            GameSong = new WindowsMediaPlayer();
            GameSong.URL = "D:\\Na_perezdachu_1.1\\Resources\\sounds\\sound.mp3";
            GameSong.settings.setMode("loop", true);
            GameSong.settings.volume = 30;

            Rip = new WindowsMediaPlayer();
            Rip.URL = "D:\\Na_perezdachu_1.1\\Resources\\sounds\\loss.mp3";
            Rip.settings.volume = 20;

            

            //задание параметров переменной cнарядов
            for (int i = 0; i < powerr.Length; i++)
            {
                powerr[i] = new PictureBox();
                powerr[i].Image = Properties.Resources.power;
                //powerr[i].Location = new Point(playerBox.Location.X, playerBox.Location.Y);
                powerr[i].Size = new Size(30, 20);
                powerr[i].SizeMode = PictureBoxSizeMode.StretchImage;
                powerr[i].BackColor = Color.Transparent;
                this.Controls.Add(powerr[i]);
            }

            //задание параметров переменной врагов(сфер)
            rnd = new Random();
            enemies = new PictureBox[5];
            enemiesSpeed = 2;
            for (int i = 0; i < (enemies.Length); i++)
            {

                int sizeEnemy = rnd.Next(50, 60);

                enemies[i] = new PictureBox();
                int b = rnd.Next(1, 3);
                
                enemies[i].Size = new Size(sizeEnemy, sizeEnemy);
                enemies[i].SizeMode = PictureBoxSizeMode.Zoom;
                enemies[i].BackColor = Color.Transparent;
                EnemiesImage(i);
                if (b == 1)
                {
                    Array[i] = 2;
                    enemies[i].Location = new Point(1000 + rnd.Next(0, 70), rnd.Next(0, 200) + 150);
                }
                if (b == 2)
                {
                    Array[i] = 1;
                    enemies[i].Location = new Point(rnd.Next(-70, 0), rnd.Next(0, 200) + 150);
                }
                this.Controls.Add(enemies[i]);

                GameSong.controls.play();

            }
        }

        //рандовное присвоение переменной врагов(сфер) картинки при определенном уровне
        private void EnemiesImage(int i)
        {
            int a = rnd.Next(1, 4);
            if (a == 1)
            {
                if (level == 1)
                    enemies[i].Image = Properties.Resources.pro_1;
                else if (level == 2)
                    enemies[i].Image = Properties.Resources.eng_1;
                else
                    enemies[i].Image = Properties.Resources.math_1;
            }
            if (a == 2)
            {
                if (level == 1)
                    enemies[i].Image = Properties.Resources.pro_21;
                else if (level == 2)
                    enemies[i].Image = Properties.Resources.eng_2;
                else
                    enemies[i].Image = Properties.Resources.math_2;
            }
            if (a == 3)
            {
                if (level == 1)
                    enemies[i].Image = Properties.Resources.pro_3;
                else if (level == 2)
                    enemies[i].Image = Properties.Resources.eng_3;
                else
                    enemies[i].Image = Properties.Resources.math_3;
            }
        }

        //таймер для движения героя влево
        private void LeftTimer_Tick(object sender, EventArgs e)
        {
            if (playerBox.Left > 420)
            {
                playerBox.Left -= playerSpeed;
            }
        }
        //таймер для движения героя вправо
        private void RightTimer_Tick(object sender, EventArgs e)
        {
            if (playerBox.Left < 421)
            {
                playerBox.Left += playerSpeed;
            }
        }
        //таймер для движения героя вверх
        private void UpTimer_Tick(object sender, EventArgs e)
        {
            //267 374

            if (playerBox.Top > 105)
            {
                playerBox.Top -= playerSpeed;
            }
        }
        //таймер для движения героя вниз
        private void DownTimer_Tick(object sender, EventArgs e)
        {
            //502   647
            if (playerBox.Top < 295)
            {
                playerBox.Top += playerSpeed;
            }
        }

        //обработка команд нажатия клавиш
        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left)
            {
                playerBox.Image = Properties.Resources.player_r;
                LeftTimer.Start();
            }
            if (e.KeyCode == Keys.Right)
            {
                playerBox.Image = Properties.Resources.player1;
                RightTimer.Start();
            }
            if (e.KeyCode == Keys.Up)
            {
                if (playerBox.Left > 420)
                {
                    playerBox.Image = Properties.Resources.player1;
                }
                else if (playerBox.Left < 421)
                {
                    playerBox.Image = Properties.Resources.player_r;
                }
                UpTimer.Start();
            }
            if (e.KeyCode == Keys.Down)
            {
                if (playerBox.Left > 420)
                {
                    playerBox.Image = Properties.Resources.player1;
                }
                else if (playerBox.Left < 421)
                {
                    playerBox.Image = Properties.Resources.player_r;
                }
                DownTimer.Start();
            }
            if (e.KeyCode == Keys.Space)
            {

                for (int i = 0; i < powerr.Length; i++)
                {

                    Intersect();
                    //if (powerr[i].Left >1100||powerr[i].Left<0)
                    Magic.controls.play();
                    if (playerBox.Left > 420)
                    {
                        playerBox.Image = Properties.Resources.player_p;
                        powerr[i].Location = new Point(playerBox.Location.X + 50 + i * 50, playerBox.Location.Y + 80);
                    }
                    else if (playerBox.Left < 421)
                    {
                        playerBox.Image = Properties.Resources.player_rp;
                        powerr[i].Location = new Point(playerBox.Location.X - 50 - i * 50, playerBox.Location.Y + 80);
                    }
                }
            }
        }

        //обработка команд отпускания клавиш
        private void Form1_KeyUp(object sender, KeyEventArgs e)
        {
            LeftTimer.Stop();
            RightTimer.Stop();
            UpTimer.Stop();
            DownTimer.Stop();
        }

        //таймер для движения снаряда
        private void PowerTimer_Tick(object sender, EventArgs e)
        {
            for (int i = 0; i < powerr.Length; i++)
            {
                if (powerr[i].Left > 1000 || powerr[i].Left < -50)
                {
                    i = powerr.Length;
                }
                else if (playerBox.Left > 420)
                {
                    powerr[i].Left += powerSpeed;
                }
                else if (playerBox.Left < 421)
                {
                    powerr[i].Left -= powerSpeed;
                }
            }

        }

        //таймер для движения врагов(сфер)
        private void EnemiesTimer_Tick(object sender, EventArgs e)
        {
            Enemies(enemies, enemiesSpeed);
        }
        private void Enemies(PictureBox[] enemies, int speed)
        {
            for (int i = 0; i < enemies.Length; i++)
            {
                if (Array[i] == 2)
                {
                    enemies[i].Left -= speed + (int)(Math.Sin(enemies[i].Left * Math.PI / 180) + Math.Cos(enemies[i].Left * Math.PI / 180));
                    Intersect();

                    if (enemies[i].Left < this.Left)
                    {
                        int sizeEnemy = rnd.Next(50, 60);
                        enemies[i].Size = new Size(sizeEnemy, sizeEnemy);
                        Array[i] = 2;
                        enemies[i].Location = new Point(1000 + rnd.Next(0, 70), rnd.Next(0, 200) + 150);
                    }

                }
                if (Array[i] == 1)
                {
                    enemies[i].Left += speed + (int)(Math.Sin(enemies[i].Left * Math.PI / 180) + Math.Cos(enemies[i].Left * Math.PI / 180));
                    Intersect();
                    if (enemies[i].Left > 1280)
                    {
                        int sizeEnemy = rnd.Next(50, 60);
                        enemies[i].Size = new Size(sizeEnemy, sizeEnemy);
                        Array[i] = 1;
                        enemies[i].Location = new Point(rnd.Next(-70, 0), rnd.Next(0, 200) + 150);

                    }

                }

            }
        }

        //обработка пересечений элементов
        private void Intersect()
        {

            for (int i = 0; i < enemies.Length; i++)
            {
                //если пуля попадет в сферу
                if (powerr[0].Bounds.IntersectsWith(enemies[i].Bounds))
                {
                    
                    score++;
                    Target.controls.play();
                    EnemiesImage(i);
                    enemies[i].Location = new Point(1000 + rnd.Next(0, 70), rnd.Next(-10, 170) + 150);
                    powerr[0].Location = new Point(2000, playerBox.Location.Y + 50);
                    label4.Text = Convert.ToString(score);
                    Levle();
                    
                }
                //если сфера попадет в персонажа
                if (playerBox.Bounds.IntersectsWith(enemies[i].Bounds))
                {
                    GameOver();
                }
            }
        }
        private void GameOver()
        {
            //вывод 
            Rip.controls.play();
            playerBox.Visible = false;
            label1.Visible = true;
            GameSong.controls.stop();
            EnemiesTimer.Stop();
            exitButton.Visible = true;
            anewButton.Visible = true;
            //anewButton и выход

        }
        private void Levle()
        {
            //изменение уровня
            if (score == 30 || score == 70 || score == 95)
            {
                if (level == 1)
                {
                    score += 10;
                    this.BackgroundImage = Properties.Resources.class_3;
                    
                }
                else if (level == 2)
                {
                    score += 10;
                    this.BackgroundImage = Properties.Resources.class_4;
                }
                if (level == 3)
                {
                    Finish();
                }

                if (level < 3)
                {

                    EnemiesTimer.Stop();
                    
                    enemiesSpeed++;
                    level++;
                    schet.Text = Convert.ToString(level);
                    EnemiesTimer.Start();
                }
            }
        }
        
        private void Finish()
        {

            EnemiesTimer.Stop();
            label6.Visible = true;
            label7.Visible = true;
            label8.Visible = true;
            label9.Visible = true;
            exitButton.Visible = true;
            anewButton.Visible = true;
            Vic = new WindowsMediaPlayer();
            Vic.URL = "D:\\Na_perezdachu_1.1\\Resources\\sounds\\finish.mp3";
            Vic.settings.setMode("loop", true);
            Vic.settings.volume = 30;
            GameSong.controls.stop();
        }
        private void anewButton_Click(object sender, EventArgs e)
        {
            Process.Start(Application.ExecutablePath);
            Close();
        }

        private void exitButton_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
}

